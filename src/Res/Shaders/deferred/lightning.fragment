#version 330
// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 color;
in vec2 lightXY;

uniform sampler2D tex0;
uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform vec2          view_size;
uniform float          lightZ;
uniform vec2          sceneTranslation;

uniform float          normal_strength;
uniform float          light_multiplier;

uniform float         scale;

vec2 pixel_position;
vec2 coord_in_normal;

vec3 normal;
vec3 lightDirection;

layout(location=0) out vec4 pixel_color; 

#include <lightning.glsl>

float calculateLambert()
{
	return mx_lambert(normal, normalize(lightDirection));
}

void init_data()
{
    pixel_position = vec2(gl_FragCoord.x, view_size.y - gl_FragCoord.y);
	coord_in_normal = vec2(pixel_position.x / view_size.x,  1.0f - pixel_position.y / view_size.y);
	pixel_position /= scale;		
	pixel_position -= sceneTranslation;   		
	


	normal = mx_normal_from_sample(normalMap, coord_in_normal, normal_strength);
	
	vec3 lightCenter;
	lightCenter.xy = lightXY.xy;
	lightCenter.xy -= sceneTranslation;  
	lightCenter.z = lightZ;
	lightDirection = vec3( lightCenter.xy - pixel_position, lightCenter.z );
}

void main()
{
	init_data();

	vec4 ccolor = texture2D(tex0, UV);
	vec4 bgcolor = texture2D(colorMap, coord_in_normal);
	
	float lambert = calculateLambert();
	float att = ccolor.a * color.a * light_multiplier; 
	
	//probably is premultiplied...
	////ccolor.rgb /= ccolor.a;
		
    pixel_color =  vec4((color.rgb * bgcolor.rgb * lambert) * att, 1.0f);
	//pixel_color =  vec4((color.rgb * lambert) * att, 1.0f); //that's sort of interesting effect for strong light
	
	
	
	//return;

	//pixel_color += testSpecular(normal, lightDirection, att);

}