#version 330

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 color;


// Values that stay constant for the whole mesh.
uniform sampler2D tex0;
uniform sampler2D normalMap;

uniform vec2          normalMap_size;
uniform vec3          lightCenter;

uniform float          normal_strength;
uniform vec3          ambient_light;
uniform float          diffuse_intensivity;
uniform float          ambient_intensivity;


uniform vec2          view_size;
uniform vec2          sceneTranslation;

layout(location=0) out vec4 pixel_color; 


vec2 pixel_position;
vec3 normal;
vec3 lightDirection;

#include <lightning.glsl>


void init_data()
{
	pixel_position = vec2(normalMap_size.x * UV.x, normalMap_size.y * (1.0- UV.y));
	normal = mx_normal_from_sample(normalMap, UV, normal_strength);
	lightDirection = vec3( lightCenter.xy - pixel_position, lightCenter.z );
}


float calculateLambert()
{
	return mx_lambert(normal, normalize(lightDirection));
}

void main(){
	init_data();
	float lambert = calculateLambert();	
	vec4 color = texture2D( tex0, UV );
	
	vec3 ambient_color = color.rgb * ambient_light * ambient_intensivity; //ambient
	vec3 diffuse_color = color.rgb * diffuse_intensivity * lambert;
	
	//pixel_color = vec4(1.0,1.0,1.0,1.0);
	//return;
	pixel_color =  vec4(ambient_color + diffuse_color, 1.0f);

	//return;
	//pixel_color += testSpecular(normal, lightDirection, diffuse_intensivity);
}