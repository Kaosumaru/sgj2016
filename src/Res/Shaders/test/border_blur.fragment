#version 330

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 color;
in vec4 UV_margins;
in vec4 instanced_xywh;

// Values that stay constant for the whole mesh.
uniform sampler2D tex0;
uniform int horizontal;

layout(location=0) out vec4 pixel_color;


#include <instanced_fragment.glsl>

void main()
{
	vec2 uv_size = mx_instanced_texture_UV_size();
	ivec2 texSize = textureSize(tex0, 0);
	//vec2 pixel_size = instanced_xywh.zw;
	vec2 uv_per_pixel = uv_size / vec2(float(texSize.x), float(texSize.y));




	float[5] offset = float[5](-2.0f, -1.0f, 0.0f, 1.0f, 2.0f);
	float[5] weightInverse = float[5](0.0,	0.0,	0.75,	0.30,	0.0);

	vec4 finalColor = vec4(0.0f);

	for(int i = 0; i < 5; i++)
	{
		vec2 o;
		if (horizontal != 0)
			o = vec2(offset[i], 0.0f)  * uv_per_pixel;
		else
			o = vec2(0.0f, offset[i])  * uv_per_pixel;

		float w = weightInverse[i];
		finalColor += texture2D(tex0, UV + o) * w;
	}

	pixel_color = finalColor * color;
}
