#version 110

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform vec2 texture_size;
uniform float time;


#define FogIter 1
#define noiseSpeed 0.01
#define timet (time/4.0)

float tri(in float x){return abs(fract(x)-.5);}
vec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}
                                 

float triNoise3d(in vec3 p, in float spd)
{
    float z=1.4;
	float rz = 0.;
    vec3 bp = p;
	for (float i=0.; i<=3.; i++ )
	{
        vec3 dg = tri3(bp*2.);
        p += (dg+timet*spd);

        bp *= 1.8;
		z *= 1.5;
		p *= 1.2;
        //p.xz*= m2;
        
        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;
        bp += 0.14;
	}
	return rz;
}

float fogmap(in vec3 p, in float d)
{
    p.x += timet*1.5;
    p.z += sin(p.x*.5);
    return triNoise3d(p*2.2/(d+20.),noiseSpeed)*(1.-smoothstep(0.,.7,p.y));
}

vec3 fog(in vec3 col, in vec3 ro, in vec3 rd, in float mt)
{
    float d = .5;
    for(int i=0; i<FogIter; i++)
    {
        vec3  pos = ro + rd*d;
        float rz = fogmap(pos, d);
		float grd =  clamp((rz - fogmap(pos+.8-float(i)*0.1,d))*3., 0.1, 1. );
        vec3 col2 = (vec3(.1,0.8,.5)*.5 + .5*vec3(.5, .8, 1.)*(1.7-grd))*0.55;
        col = mix(col,col2,clamp(rz*smoothstep(d-0.4,d+2.+d*.75,mt),0.,1.) );
        d *= 1.5+0.3;
        if (d>mt)break;
    }
    return col;
}

void main()
{
	gl_FragColor.a = 1.0;
	
	vec4 distortion_fragment = texture2D(tex1, gl_TexCoord[0].st);
	vec2 texcoord = gl_TexCoord[0].st;

    float power = 400.0;
    
	texcoord.x -= distortion_fragment.r * power / texture_size.x;
	texcoord.x += distortion_fragment.g * power / texture_size.x;
	texcoord.y -= distortion_fragment.b * power / texture_size.y;
	texcoord.y += distortion_fragment.a * power / texture_size.y;


	gl_FragColor.rgb = texture2D( tex0, texcoord ).rgb;
	
	
	vec2 p = gl_FragCoord.xy/ texture_size.xy-0.5;
    vec2 q = gl_FragCoord.xy/texture_size.xy;
	p.x*=texture_size.x/texture_size.y;
    
 

	
	vec3 ro = vec3(smoothstep(0.,1.,tri(timet*.45)*2.)*0.1, smoothstep(0.,1.,tri(timet*0.9)*2.)*0.07, -timet*0.6);
    //ro.y -= height(ro.zx)+0.05;
    
    vec3 eyedir = normalize(vec3(0,0,1));
    vec3 rightdir = normalize(vec3(1,0.,0));
    
    vec3 updir = normalize(cross(rightdir,eyedir));
	vec3 rd=normalize((p.x*rightdir+p.y*updir)*1.+eyedir);
	
    vec3 ligt = normalize( vec3(.5, .05, -.2) );
    vec3 ligt2 = normalize( vec3(.5, -.1, -.2) );
    
	float rz = 5.0;
	
    //vec3 fogb = mix(vec3(.7,.8,.8	)*0.3, vec3(1.,1.,.77)*.95, pow(dot(rd,ligt2)+1.2, 2.5)*.25);
    //fogb *= clamp(rd.y*.5+.6, 0., 1.);
    //vec3 col = fogb;
 
	vec3 col;
    //volumetric fog
    col = fog(col, ro, rd, rz);
    
    //post
	//col /= 30.;
    col = pow(col,vec3(0.8));
    //col *= 1.-smoothstep(0.1,2.,length(p));
    
	gl_FragColor += vec4( col, 1.0 );
	
	//gl_FragColor *=0.01;
	
	//gl_FragColor.r = q.x;
	//gl_FragColor.bg *= 0.01;
	
/*	
    vec2 position = gl_TexCoord[0].st - vec2(0.5);

    //OPTIONAL: correct for aspect ratio
    position.x *= texture_size.x / texture_size.y;

    //determine the vector length from center
    float len = length(position);

    //our vignette effect, using smoothstep
    float vignette = smoothstep(RADIUS, RADIUS-SOFTNESS, len);

    //apply our vignette
    gl_FragColor.rgb *= vignette;	
*/

}