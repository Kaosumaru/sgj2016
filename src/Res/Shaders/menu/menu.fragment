#version 330

// Interpolated values from the vertex shaders
in vec2 UV; in vec4 color; in vec4 UV_margins;

// Values that stay constant for the whole mesh.
uniform sampler2D tex0;
uniform float time;
uniform float time_m;

float  xtime = time * time_m;
vec2   resolution = vec2(1980.0, 1080.0);

layout(location = 0) out vec4 pixel_color;

float length2(vec2 p) { return dot(p, p); }

float noise(vec2 p){
	return fract(sin(fract(sin(p.x) * (45.0)) + p.y) * 30.0);
}

float worley(vec2 p) {
	float d = 1e30;
	for (int xo = -1; xo <= 1; ++xo) {
		for (int yo = -1; yo <= 1; ++yo) {
			vec2 tp = floor(p) + vec2(xo, yo);
			d = min(d, length2(p - tp - vec2(noise(tp))));
		}
	}
	return 3.0*exp(-3.0*abs(2.0*d - 1.0));
}

float fworley(vec2 p) {
	return sqrt(sqrt(sqrt(
		1.1 * // light
		worley(p*5. + .3 + xtime*.0525) *
		sqrt(worley(p * 50. + 0.3 + xtime * -0.15)) *
		sqrt(sqrt(worley(p * -10. + 9.3))))));
}

void main(void)
{
  vec2 uv = gl_FragCoord.xy / resolution.xy;
	float t = fworley(uv * resolution.xy / 1500.0);
	t *= exp(-length2(abs(0.7*uv - 1.0)));
	pixel_color = vec4(t * vec3(0.1, 1.5*t, 1.2*t + pow(t, 0.5-t)), 1.0);
}
